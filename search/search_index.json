{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STEMMUS_SCOPE","text":"<p>Integrated code of SCOPE and STEMMUS.</p> <p>SCOPE is a radiative transfer and energy balance model, and STEMMUS model is a two-phase mass and heat transfer model. For more information about the coupling between these two models, please check this reference.  (by Zeng &amp; Su, 2021)</p>"},{"location":"CONTRIBUTING/","title":"Contributing guide","text":"<p>NOTE: The instructions below are meant for users who want to add changes to the model source code. If you want to run the model, see the documentation on \"Running the model\".</p> <p>This repository includes the MATLAB source code of the STEMMUS-SCOPE model. We welcome any kind of contributions to our software, from simple comments or questions to a full pull request. Please read and follow our contributing guidelines.</p>"},{"location":"CONTRIBUTING/#contributing-via-github","title":"Contributing via GitHub","text":"<p>If you want to work with the <code>STEMMUS_SCOPE</code> repository for the first time, or on a new computer, you need to configure a few things following steps 1 through 5 below.</p> Steps 1 to 5   ### 1. Enable two-factor authentication  It is strongly recommended using two-factor authentication. Here is the link of [Configuring two-factor authentication](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication).  ### 2. Set ssh connection  With SSH keys, you can connect to GitHub without supplying your username and personal access token at each visit. Please follow the instructions below. If you like to know more, see [Connecting to GitHub with SSH](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)  #### 2.1. Checking for existing SSH keys  Open a terminal and run the command below:  <pre><code>ls -la ~/.ssh\n</code></pre>  This command lists the files with extension `.pub` like `id_rsa.pub` in the `.ssh` directory, if they exist. If you receive an error that `~/.ssh` doesn't exist, or you don't see any files with extension `.pub`, you do not have an existing SSH key pair. So, continue with step **2.2**. Otherwise, skip step 2.2 and continue with step **2.3**.  #### 2.2. Generating a new SSH key  Open a terminal and run the command below but replace `your_user_email` with your own GitHub email address:  <pre><code>ssh-keygen -t ed25519 -C \"your_user_email\"\n</code></pre>  When you're prompted to \"Enter a file in which to save the key,\" press `Enter`. This accepts the default file location.  The next prompt asks \"Enter passphrase (empty for no passphrase)\", type a secure passphrase. For more information, see [Working with SSH key passphrases](https://docs.github.com/en/articles/working-with-ssh-key-passphrases).  #### 2.3. Adding your SSH key to the ssh-agent  Open a terminal and run the command below:  <pre><code>eval \"$(ssh-agent -s)\"\n</code></pre>  Then, run the command below:  <pre><code>ssh-add ~/.ssh/id_ed25519\n</code></pre>  This asks for your \"passphrase\" that was provided in the previous step.  #### 2.4. Adding a new SSH key to your GitHub account  Please follow steps 1 to 8 in this [GitHub instruction](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account).  ### 3. Configure git  #### 3.1. Set name and email  Open a terminal, and run the commands below one by one but replace `your_user_name` and `your_user_email` with your own GitHub information:  <pre><code>git config --global user.name \"your_user_name\"\ngit config --global user.email \"your_user_email\"\n</code></pre>  #### 3.2. Set line endings  Change the way Git encodes line endings on Linux as:  <pre><code>git config --global core.autocrlf input\n</code></pre>  #### 3.3. Set text editor  We can set `nano` as our favorite text editor, following:  <pre><code>git config --global core.editor \"nano -w\"\n</code></pre>  &gt; We use `nano` here because it is one of the least complex text editors. Press &gt; `ctrl + O` to save the file, and then `ctrl + X` to exit `nano`.  #### 3.4. Check your settings  You can check your settings at any time:  <pre><code>git config --list\n</code></pre>  For more information, see lesson [Setting Up Git](https://swcarpentry.github.io/git-novice/02-setup/index.html).  ### 4. Clone the repository  Open a terminal and run the command below:  <pre><code>cd\n</code></pre> Now you are in your `HOME` directory. Run the command below:  <pre><code>git clone git@github.com:EcoExtreML/STEMMUS_SCOPE.git\n</code></pre>  Now a new GitHub folder `STEMMUS_SCOPE` is created in your `HOME` directory.  &gt; In this command, we clone the repository using `ssh` option. As we set the ssh connection in [**Step 2**](#2-set-ssh-connection), this command here does not ask for our user name and password.  ### 5. Collaborate using GitHub  To know about the most common Git commands, follow the guides [here](https://hackmd.io/B4v6KwsBRzG-akLDF8e5pg)."},{"location":"CONTRIBUTING/#adding-changes-to-the-model-source-code","title":"Adding changes to the model source code","text":"<p>To setup the required software and configurations, see the documentation on \"Getting started\".</p> <p>It would be ideal to introduce changes incrementally over time. This way, you can track the changes and understand the impact of each change. Here are the steps to follow:</p> <ul> <li>Submit an issue to the   repository. This issue should describe the problem or the feature you want to   introduce.</li> <li>Create a new branch from the <code>main</code> branch. This branch should have a   descriptive name that relates to the issue you are working on.</li> <li>Make the changes in the new branch, for example, you can add new features, fix   bugs, or improve the documentation. Follow MATLAB Guidelines 2.0, Richard   Johnson   when introducing new changes to the codes.</li> <li>Commit the changes to the new branch. Write a descriptive commit message that   explains the changes you are introducing.</li> <li>Push the changes to the repository.</li> <li>Create a draft pull   request   to the <code>main</code> branch. This pull request should reference the issue you are   working on.</li> <li>When you are done with the changes, run the tests and   MISS_HIT commands, make sure they pass.</li> <li>Make the pull request ready for review. Ask for a review from the repository   maintainers.</li> <li>The maintainers will review the changes and provide feedback. You may need to   make additional changes based on the feedback.</li> <li>When the changes are approved, the maintainers will merge the pull request.</li> </ul>"},{"location":"CONTRIBUTING/#reviewing-a-pull-request","title":"Reviewing a pull request","text":"<p>When you are reviewing a pull request, you should follow the steps below:</p> <ul> <li>Check the changes introduced in the pull request. Make sure the changes are   consistent with the issue description. Also, check for example variable names,   function names, documentation, global variables, ..., to see if the changes   are consistent with the MATLAB Style Guidelines   2.0.</li> <li>Run the tests and MISS_HIT commands to make sure they pass.</li> <li>Provide feedback on the changes. You can ask questions, suggest improvements,   or point out issues.</li> <li>When you are satisfied with the changes, approve the pull request. Ask a   maintainer to re-generate the executable   file and merge the pull   request.</li> <li>If the changes are related to BMI, you have to ask the maintainer to make a   new release of the model. This way a new docker image will be created and the   model will be available for the users.</li> <li>If the changes are related to the documentation, make sure that documentation   page can be built successfully, see Building the documentation   locally.</li> </ul>"},{"location":"CONTRIBUTING/#merging-a-pull-request","title":"Merging a pull request","text":"<p>When you are merging a pull request, you should follow the steps below:</p> <ul> <li>Make sure the pull request is approved by at least one reviewer.</li> <li>Make sure all the items in the pull request's list are checked.</li> </ul>"},{"location":"CONTRIBUTING/#creating-an-executable-file-of-stemmus_scope","title":"Creating an executable file of STEMMUS_SCOPE","text":"<p>See the disumentation on executable file.</p>"},{"location":"CONTRIBUTING/#miss_hit-checks","title":"MISS_HIT Checks","text":"<p>When you submit a pull request, the code is also checked by the MISS_HIT linter and style checker. The status of <code>MISS_HIT</code> checks is shown below the pull request. The checks should be successful (green) before merging the pull request. To work with <code>MISS_HIT</code>, follow the instructions below:</p> <ul> <li> <p>Installing MISS_HIT: To install MISS_HIT, follow their installation   instructions.</p> </li> <li> <p>Running MISS_HIT: To run the style checker or linter, navigate to the <code>src/</code>   folder in STEMMUS_SCOPE, and run the following commands:</p> </li> </ul> <pre><code>mh_style\nmh_lint\nmh_metric\n</code></pre> <p>Follow the errors and information in the output to fix any issues.</p> <ul> <li>Configuring MISS_HIT: <code>MISS_HIT</code> is configured in <code>miss_hit.cfg</code>. This file contains the configuration for the linter and style checker. Please do not change this file unless you are familiar with the configuration options.</li> </ul>"},{"location":"CONTRIBUTING/#testing-new-changes","title":"Testing new changes","text":"<p>To test the new changes, we can only check if the new changes do not break the model. To do this, follow the steps below:</p> <ul> <li>Run the notebook <code>compare_git_branch_results.ipynb</code> in the <code>test</code> folder. This   notebook will compare the results of the model between the <code>main</code> branch and   the new branch with the changes. If the results are similar, the changes do   not break the model.</li> <li>Create the executable file of   the model and run the model with the new changes. Check if the model runs   without any errors.</li> <li>Run the model with Octave to check if the new changes   are compatible with Octave.</li> </ul>"},{"location":"CONTRIBUTING/#building-the-documentation-locally","title":"Building the documentation locally","text":"<p>Documentation is created using several markdown files and the <code>mkdocs</code> tool. The markdown files are located in the <code>docs</code> folder. The configuration file for <code>mkdocs</code> is <code>mkdocs.yml</code> located in the root directory. To build the documentation locally, follow the steps below:</p> <ul> <li>Install the required dependencies as:</li> </ul> <pre><code>cd STEMMUS_SCOPE\npip install -r docs/requirements.txt\n</code></pre> <ul> <li>Build the documentation as:</li> </ul> <pre><code>mkdocs build\n</code></pre> <ul> <li>Preview the documentation as:</li> </ul> <pre><code>mkdocs serve\n</code></pre> <p>Click on the link provided in the terminal to view the documentation in your browser.</p>"},{"location":"CONTRIBUTING/#making-a-release","title":"Making a release","text":"<p>When you are ready to make a release of the model, follow the steps below:</p> <ul> <li>Make sure all new changes are added to changes log in the file   \"CHANGELOG.md\".</li> <li>Create a new release in the repository. The release should have a version number   following the semantic versioning guidelines.</li> <li>Add a description of the changes in the release notes.</li> </ul>"},{"location":"CONTRIBUTING/#github-actions-workflow","title":"GitHub actions workflow","text":"<p>GitHub actions workflows are located in the folder <code>.github/workflows</code>:</p> <ul> <li><code>lint.yml</code>: This workflow checks the code style and lints the code using   <code>MISS_HIT</code>.</li> <li><code>doc_deploy.yml</code>: This workflow builds the documentation and deploys it to   GitHub pages. It will create a gh-pages branch in the repository.</li> <li><code>publish-container</code>: This workflow builds the docker image and publishes it to   the repository once a new release is made. The docker image will avialable in   the   packages   in the repository.</li> </ul>"},{"location":"CONTRIBUTING/#docker-image","title":"Docker image","text":"<p>The Dockerfile is located in the root directory. This file is used to build the docker image of the model by Github action <code>publish-container</code>, see GitHub actions workflow. To build and run the docker image locally, follow the steps below:</p> <ul> <li>Install Docker.</li> <li>Build the docker image locally as:</li> </ul> <pre><code>cd STEMMUS_SCOPE\ndocker build -t stemmus_scope .\n</code></pre> <ul> <li>Run the docker image with the BMI interface as:</li> </ul> <pre><code>docker run -u $(id -u):$(id -g) -v /path_to_input_folder:/path_to_input_folder -v /path_to_output_folder:/path_to_output_folder -it stemmus_scope\n</code></pre> <p>With <code>-it</code> option, you can enter the docker interactive mode.   Now, BMI asks you to select one of the steps \"initialize\", \"update\" or \"finalize\".   To initialize the model using a config file, type:</p> <pre><code>initialize \"path/to/config_file_template.txt\"\n</code></pre>"},{"location":"CONTRIBUTING/#octave-compatibility","title":"Octave compatibility","text":"<p>See the documentation on Octave.</p>"},{"location":"Octave_instructions/","title":"Running STEMMUS-SCOPE in Octave","text":"<p>If you want to run the model for a small time period or tests purpose, you can use Octave. Allmost all funcationalities of STEMMUS_SCOPE are compatible with Octave, but the execution time is longer than MATLAB. After Octave installation, launch octave and install the following Octave packages:</p> <pre><code>pkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/io-2.6.4.tar.gz\"\npkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/statistics-1.4.3.tar.gz\"\n</code></pre> <p>Then, pass config file path to the variable <code>CFG</code> in the main script <code>STEMMUS_SCOPE.m</code>. Run the model in a terminal:</p> <pre><code>cd src/\noctave.bat --no-gui --interactive --silent --eval \"STEMMUS_SCOPE\"\n</code></pre> <p>On a Unix system, use <code>octave</code> instead of <code>octave.bat</code>.</p> Octave from source  Note that Octave on many Linux distributions might be too old so we need to compile it ourselves. See [https://wiki.octave.org/Building](https://wiki.octave.org/Building). Here are build instructions for Ubuntu 22.04:  <pre><code>sudo apt update\n# install minimal deps, see https://wiki.octave.org/Octave_for_Debian_systems#The_right_way for all dependencies\nsudo apt install -yq wget build-essential gfortran liblapack-dev libblas-dev libpcre3-dev libreadline-dev libnetcdf-dev\nwget https://mirror.serverion.com/gnu/octave/octave-7.2.0.tar.gz  # or download from local mirror at https://ftpmirror.gnu.org/octave\ntar -zxf octave-7.2.0.tar.gz\ncd octave-7.2.0\n./configure --prefix=/opt/octave\nmake -j 6\nsudo make install\n</code></pre>  Add `/opt/octave/bin` to PATH environment variable.  <pre><code>export PATH=$PATH:/opt/octave/bin\n</code></pre>  Launch Octave and install Octave dependencies with:  <pre><code>pkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/io-2.6.4.tar.gz\"\npkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/statistics-1.4.3.tar.gz\"\n</code></pre>"},{"location":"Octave_instructions/#vs-code-setup","title":"VS Code setup","text":"<p>Add Octave to path, e.g. for (64-bit) Windows add the following folders: <code>C:\\Program Files\\GNU Octave\\Octave-7.1.0\\mingw64\\bin</code> <code>C:\\Program Files\\GNU Octave\\Octave-7.1.0\\usr\\bin</code></p> <p>Add the extensions <code>Octave Debugger</code> by Paulo Silva https://marketplace.visualstudio.com/items?itemName=paulosilva.vsc-octave-debugger This allows to run Octave in the VS Code debugger. The debugger configurations are included in <code>/.vscode/launch.json</code></p> <p><code>Octave Hacking</code> by Andrew Janke https://marketplace.visualstudio.com/items?itemName=apjanke.octave-hacking This adds syntax highlighting and formatting.</p>"},{"location":"Octave_instructions/#developing-stemmus-scope-in-octave","title":"Developing STEMMUS-SCOPE in Octave","text":"<p>Open the <code>debug_Octave.m</code> file, either in VS Code or the Octave GUI.</p>"},{"location":"Octave_instructions/#octave-gui","title":"Octave GUI","text":"<p>Set the workspace to the <code>STEMMUS_SCOPE/src</code> folder, and open the <code>debug_Octave.m</code> file. Here you can set the config file that should be used, and then run the file.</p>"},{"location":"Octave_instructions/#vs-code","title":"VS Code","text":"<p>While having the <code>STEMMUS_SCOPE</code> folder as the workspace, open the debugger and select <code>Octave: Debug STEMMUS-SCOPE</code>. Start the debugger to run (and debug) the model.</p> <p>In the <code>debug_Octave.m</code> file you can set the config file that should be used.</p>"},{"location":"Octave_instructions/#vs-code-dev-container","title":"VS Code + Dev container","text":"<p>If you have Docker installed and running you can use a container to do development.</p> <p>Install the Dev Containers VS code extension and reopen the folder in VS Code.</p> <p>It will then start a Docker container with your code, Octave and the VS Code Octave extensions.</p>"},{"location":"Octave_instructions/#mount-extra-directory","title":"Mount extra directory","text":"<p>By default a Dev container only has the current VS code folder mounted inside the container.</p> <p>To add additional directories like directory with model input files to the container you will need to edit the .devcontainer/devcontainer.json and add</p> <pre><code>\"mounts\": [\n  \"source=/local/source/path/goes/here,target=/target/path/in/container/goes/here,type=bind,consistency=cached\"\n]\n</code></pre> <p>After editing file you can restart the editor to get the extra directory inside the dev container.</p> <p>See dev container docs for more info.</p> <p>To mount Windows directory inside the dev container you have to start the container in WSL2 (aka run Docker service inside WSL2) and use unix paths like <code>/mnt/c/...</code>.</p>"},{"location":"STEMMUS_SCOPE_BMI/","title":"STEMMUS SCOPE BMI","text":""},{"location":"STEMMUS_SCOPE_BMI/#stemmus_scope-bmi","title":"STEMMUS_SCOPE BMI","text":"<p><code>STEMMUS_SCOPE</code> has a BMI-like interface. This is available when running the Matlab Runtime version of the model. The full BMI is implemented in Python in PyStemmusScope.</p> <p>A Docker image will also be available, which allows you to run the model on any system without installing Matlab Runtime.</p>"},{"location":"STEMMUS_SCOPE_BMI/#bmi-mode","title":"BMI mode","text":"<p>When starting the executable, a run-mode can be specified. The following command will run the model using the config file:</p> <pre><code>./STEMMUS_SCOPE \"/home/path/to/config/file.txt\" full\n</code></pre> <p>(Where <code>./STEMMUS_SCOPE</code> is the path to the executable. For more info see documentation)</p> <p>To start BMI mode, pass anything (e.g. an empty string \"\") as config file, and use <code>bmi</code> to start the model in BMI-mode:</p> <pre><code>./STEMMUS_SCOPE \"\" bmi\n</code></pre> <p>The model will respond with <code>Finished command. Select run mode:</code>. Now you can initialize the model:</p> <pre><code>Finished command. Select run mode: initialize \"/home/path/to/config/file.txt\"\n</code></pre> <p>The model will respond with: <pre><code>Reading config from /home/path/to/config/file.txt\nFinished model initialization\n</code></pre></p> <p>Now you can use the commands <code>update</code> to advance the model by one timestep, and <code>finalize</code> to finalize the model.</p>"},{"location":"STEMMUS_SCOPE_BMI/#exposing-variables-to-bmi-interface","title":"Exposing variables to BMI interface","text":"<p>The variables which are exposed to the Python BMI are defined in <code>STEMMUS_SCOPE_exe.m</code>. To add more variables, update the <code>bmiVarNames</code> variable. After this, you will need to change the BMI codes in PyStemmusScope so it can make use of these exposed variables.</p>"},{"location":"STEMMUS_SCOPE_on_CRIB/","title":"STEMMUS SCOPE on CRIB","text":""},{"location":"STEMMUS_SCOPE_on_CRIB/#stemmus_scope-on-crib","title":"STEMMUS_SCOPE on CRIB","text":"<p>CRIB is the ITC Geospatial Computing Platform.</p>"},{"location":"STEMMUS_SCOPE_on_CRIB/#dataflow-of-stemmus_scope-on-crib","title":"Dataflow of STEMMUS_SCOPE on CRIB","text":"<p>To run the STEMMUS-SCOPE model, you need to have input data either from in-situ measurements or from remote sensing. Plumber2 site data are avialable under project directory on CRIB. This folder includes:</p> <ul> <li>Plumber2_data: the forcing/driving data provided by PLUMBER2.</li> <li>SoilProperty: the soil texture data and soil hydraulic parameters.</li> </ul> <p>In addition to site data, the remote sensing data are available on CRIB in <code>global_data</code> folder.</p> <p>Data required by the model are in a folder named \"input\". Below the directory explanations are from SCOPE documentation:</p> <ul> <li>directional: the observer\u2019s zenith and azimuth angles.(only used for   multi-angle simulations (if the option \u2018directional\u2019 is switched on in   parameters).</li> <li>fluspect_parameters: absorption spectra of different leaf components are   provided, according to PROSPECT 3.1, as well as Fluspect input: standard   spectra for PSI and PSII.</li> <li>leafangles: example leaf inclination distribution data are provided.</li> <li>radiationdata: RTMo.m calculates spectra based on MODTRAN5 outputs (T-18   system).Note that in the input data (files as well as the spreadsheet),   the broadband input radiation may be provided. SCOPE linearly scales the   input spectra of the optical and the thermal domain in such a way that   the spectrally integrated input shortwave and long-wave radiation matches   with the measured values.</li> <li>soil_spectra: the soil spectrum is provided. Note that it is also possible   to simulate a soil reflectance spectrum with the BSM model. In that case,   the values for the BSM model parameters are taken from the input data, and   the archived spectra in this folder are not used.</li> <li>input_data.xlsx: the input to SCOPE model is provided. It   provides parameter inputs for PROSPECT, leaf_biochemical, fluorescence,   soil, canopy, aerodynamic, angles, photosynthetic temperature dependence   functional parameters, etc.</li> <li>input_soilLayThick.csv (optional): A file to change the discretization of the   soil layers of the STEMMUS model. An example of this file is in example_data   folder.   This file (if needed) should be copied into the   <code>InputPath</code> folder. If this file is used, it will override the default settings of   the soil layers. The file has three columns: 1) layer number, 2) layer thickness,   and 3) maximum root depth. The user is free to change the values of the three columns.   Also, the number of rows determines the number of the soil layers and the total   thickness of the soil column (sum of soil layer thickness).</li> </ul>"},{"location":"STEMMUS_SCOPE_on_CRIB/#configuration-file","title":"Configuration file","text":"<p>Config file: it is a text file that sets the paths required by the model. For example, see config_file_crib.txt or config_file_crib_global.txt in this repository. This file includes:</p> <ul> <li>SoilPropertyPath: a path to soil texture data and soil hydraulic   parameters.</li> <li>InputPath: this is the working/running directory of the model and should   include the data of <code>directional</code>, <code>fluspect_parameters</code>, <code>leafangles</code>,   <code>radiationdata</code>, <code>soil_spectra</code>, and <code>input_data.xlsx</code>.</li> <li>OutputPath: this is the base path to store outputs of the model. When the model runs, it creates <code>sitename_timestamped</code> directories under this path.</li> <li>ForcingPath: a path to the forcing/driving data. I.e. the Plumber2 dataset.</li> <li>Location: Location where the model should be run. Currently, the model runs at the site scale. For example, if we put <code>FI-Hyy</code> here, the model runs at the <code>FI-Hyy</code> site.</li> <li>StartTime: The start time of the model, in the ISO 8601 format. For example: <code>2001-01-01T00:00</code>. Note that the time can only be defined in half hour increments. If you want the start time to be the first available data point of the forcing data, you can set StartTime to <code>NA</code>.</li> <li>EndTime: The end time of the model. Formatted the same way as the StartTime. For example: <code>2001-12-31T23:30</code>. If you want the end time to be the last available data point of the forcing data, you can set EndTime to <code>NA</code>.</li> </ul> <p>To edit the config file, open the file with a text editor and change the paths. The variable names e.g. <code>SoilPropertyPath</code> should not be changed. Also, note a <code>/</code> is required at the end of each line.</p> <p>As explained above, the \"InputPath\" directory of the model is considered as the working/running directory and should include some data required by the model. As seen in the config file, the \"InputPath\" is now set as same as the \"input\" folder. This means that the \"input\" folder is treated as the model's working/running directory. However, it is possible to create a different working/running directory and set the \"InputPath\" to it. Then, you should copy the required data i.e. <code>directional</code>, <code>fluspect_parameters</code>, <code>leafangles</code>, <code>radiationdata</code>, <code>soil_spectra</code>, and <code>input_data.xlsx</code> to the working/running directory.</p>"},{"location":"STEMMUS_SCOPE_on_Snellius/","title":"STEMMUS SCOPE on Snellius","text":""},{"location":"STEMMUS_SCOPE_on_Snellius/#stemmus_scope-on-snellius","title":"STEMMUS_SCOPE on Snellius","text":"<p>Snellius is the Dutch National supercomputer hosted at SURF.</p>"},{"location":"STEMMUS_SCOPE_on_Snellius/#dataflow-of-stemmus_scope-on-snellius","title":"Dataflow of STEMMUS_SCOPE on Snellius","text":"<p>To run the STEMMUS-SCOPE model, you need to have input data either from in-situ measurements or from remote sensing. Data required by the model are in a folder named \"data\" in the project directory <code>einf2480</code> on Snellius. This directory includes:</p> <ul> <li>forcing/plumber2_data: the forcing/driving data provided by PLUMBER2.</li> <li>model_parameters/soil_property: the soil texture data and soil hydraulic parameters.</li> <li>model_parameters/vegetation_property:</li> <li>directional</li> <li>fluspect_parameters</li> <li>leafangles</li> <li>radiationdata</li> <li>soil_spectra</li> <li>input_data.xlsx</li> <li>input_soilThick.csv (optional)</li> </ul> <p>In addition to site data, the remote sensing data are available on Snellius in <code>global_data</code> folder.</p>"},{"location":"STEMMUS_SCOPE_on_Snellius/#configuration-file","title":"Configuration file","text":"<p>Config file: it is a text file that sets the paths required by the model. For example, see config_file_snellius.txt or config_file_snellius_global.txt in this repository. This file includes:</p> <ul> <li>SoilPropertyPath: a path to soil texture data and soil hydraulic   parameters.</li> <li>InputPath: this is the working/running directory of the model and should   include the data of <code>directional</code>, <code>fluspect_parameters</code>, <code>leafangles</code>,   <code>radiationdata</code>, <code>soil_spectra</code>, and <code>input_data.xlsx</code>.</li> <li>OutputPath: this is the base path to store outputs of the model. When the model runs, it creates <code>sitename_timestamped</code> directories under this path.</li> <li>ForcingPath: a path to the forcing/driving data. I.e. the Plumber2 dataset.</li> <li>Location: Location where the model should be run. Currently, the model runs at the site scale. For example, if we put <code>FI-Hyy</code> here, the model runs at the <code>FI-Hyy</code> site.</li> <li>StartTime: The start time of the model, in the ISO 8601 format. For example: <code>2001-01-01T00:00</code>. Note that the time can only be defined in half hour increments. If you want the start time to be the first available data point of the forcing data, you can set StartTime to <code>NA</code>.</li> <li>EndTime: The end time of the model. Formatted the same way as the StartTime. For example: <code>2001-12-31T23:30</code>. If you want the end time to be the last available data point of the forcing data, you can set EndTime to <code>NA</code>.</li> </ul> <p>To edit the config file, open the file with a text editor and change the paths. The <code>InputPath</code> and <code>OutputPath</code> are user-defined directories, make sure they exist and you have right permissions. The variable name e.g. <code>SoilPropertyPath</code> should not be changed. Also, note a <code>/</code> is required at the end of each line.</p> <p>As explained above, the \"InputPath\" directory of the model is considered as the working/running directory and should include some data required by the model. As seen in the config file, the \"InputPath\" is now set to an \"input\" folder under \"scratch-shared\" directory. This means that the \"input\" folder is treated as the model's working/running directory. However, it is possible to create a different working/running directory and set the \"InputPath\" to it. Then, you should copy the required data i.e. <code>directional</code>, <code>fluspect_parameters</code>, <code>leafangles</code>, <code>radiationdata</code>, <code>soil_spectra</code>, and <code>input_data.xlsx</code> to the working/running directory. For example: <code>cp -r /projects/0/einf2480/model_parameters/vegetation_property/* /scratch-shared/EcoExtreML/STEMMUS_SCOPE/input/&lt;your_work_dir&gt;</code></p>"},{"location":"getting_started/","title":"Requiremnets","text":""},{"location":"getting_started/#computig-resource","title":"Computig resource","text":"<p>To run the STEMMUS-SCOPE model, you can use one of the following computing resources:</p> <ul> <li>CRIB is the ITC Geospatial Computing Platform.</li> <li>Snellius is the Dutch National supercomputer hosted at SURF.</li> </ul> <p>Otherwise, you can run the model on your local device if you have the correct set of software and data.</p>"},{"location":"getting_started/#software","title":"Software","text":"<p>To run the STEMMUS-SCOPE model, you need one of the following:</p> <ul> <li>MATLAB</li> <li>MATLAB Runtime on a Unix-like system</li> <li>Octave</li> <li>Docker</li> </ul>"},{"location":"getting_started/#model-source-code","title":"Model source code","text":"<p>The source code of STEMMUS_SCOPE can be found in the GitHub repository https://github.com/EcoExtreML/STEMMUS_SCOPE under the folder <code>src</code>. Download the latest version of the model from the repository or get it using <code>git clone</code> in a terminal:</p> <p><code>git clone https://github.com/EcoExtreML/STEMMUS_SCOPE.git</code></p>"},{"location":"getting_started/#data","title":"Data","text":"<p>To run the STEMMUS-SCOPE model, you need to have input data either from in-situ measurements or from remote sensing. Before running the model, you need to prepare input data and a configuration file for one site/location. This can be done using setup() function in the python package PyStemmusScope. See example datasets below:</p> Example dataset on ZenodoData on CRIBData on Snellius <p>A pre-processed example dataset for one site can be found on Zenodo here.</p> <p>CRIB is the ITC Geospatial Computing Platform.</p> <p>To run the STEMMUS-SCOPE model, you need to have input data either from in-situ measurements or from remote sensing. Plumber2 site data are avialable under project directory on CRIB. This folder includes:</p> <ul> <li>Plumber2_data: the forcing/driving data provided by PLUMBER2.</li> <li>SoilProperty: the soil texture data and soil hydraulic parameters.</li> </ul> <p>In addition to site data, the remote sensing data are available on CRIB in <code>global_data</code> folder.</p> <p>Data required by the model are in a folder named \"input\". Below the directory explanations are from SCOPE documentation:</p> <ul> <li>directional: the observer\u2019s zenith and azimuth angles.(only used for   multi-angle simulations (if the option \u2018directional\u2019 is switched on in   parameters).</li> <li>fluspect_parameters: absorption spectra of different leaf components are   provided, according to PROSPECT 3.1, as well as Fluspect input: standard   spectra for PSI and PSII.</li> <li>leafangles: example leaf inclination distribution data are provided.</li> <li>radiationdata: RTMo.m calculates spectra based on MODTRAN5 outputs (T-18   system).Note that in the input data (files as well as the spreadsheet),   the broadband input radiation may be provided. SCOPE linearly scales the   input spectra of the optical and the thermal domain in such a way that   the spectrally integrated input shortwave and long-wave radiation matches   with the measured values.</li> <li>soil_spectra: the soil spectrum is provided. Note that it is also possible   to simulate a soil reflectance spectrum with the BSM model. In that case,   the values for the BSM model parameters are taken from the input data, and   the archived spectra in this folder are not used.</li> <li>input_data.xlsx: the input to SCOPE model is provided. It   provides parameter inputs for PROSPECT, leaf_biochemical, fluorescence,   soil, canopy, aerodynamic, angles, photosynthetic temperature dependence   functional parameters, etc.</li> <li>input_soilLayThick.csv (optional): A file to change the discretization of the   soil layers of the STEMMUS model. An example of this file is in example_data   folder.   This file (if needed) should be copied into the   <code>InputPath</code> folder. If this file is used, it will override the default settings of   the soil layers. The file has three columns: 1) layer number, 2) layer thickness,   and 3) maximum root depth. The user is free to change the values of the three columns.   Also, the number of rows determines the number of the soil layers and the total   thickness of the soil column (sum of soil layer thickness).</li> </ul> <p>Snellius is the Dutch National supercomputer hosted at SURF.</p> <p>To run the STEMMUS-SCOPE model, you need to have input data either from in-situ measurements or from remote sensing. Data required by the model are in a folder named \"data\" in the project directory <code>einf2480</code> on Snellius. This directory includes:</p> <ul> <li>forcing/plumber2_data: the forcing/driving data provided by PLUMBER2.</li> <li>model_parameters/soil_property: the soil texture data and soil hydraulic parameters.</li> <li>model_parameters/vegetation_property:</li> <li>directional</li> <li>fluspect_parameters</li> <li>leafangles</li> <li>radiationdata</li> <li>soil_spectra</li> <li>input_data.xlsx</li> <li>input_soilThick.csv (optional)</li> </ul> <p>In addition to site data, the remote sensing data are available on Snellius in <code>global_data</code> folder.</p>"},{"location":"getting_started/#configuration-file","title":"Configuration file","text":"<p>The configuration file is a text file that sets the paths required by the model. The configuration file should contain the following information:</p> <pre><code>WorkDir=/path_to_working_directory/\nSoilPropertyPath=/path_to_soil_property_data/\nForcingPath=/path_to_forcing_data/\nLocation=AU-DaS\ndirectional=/path_to_directional_data/\nfluspect_parameters=/path_to_fluspect_parameters_data/\nleafangles=/path_to_leafangles_data/\nradiationdata=/path_to_radiation_data/\nsoil_spectrum=/path_to_soil_spectra_data/\nInitialConditionPath=/path_to_soil_initial_condition_data/\ninput_data=/path_to_input_data.xlsx_file/\nStartTime=2001-01-01T00:00\nEndTime=2001-01-02T00:00\nInputPath=/path_to_model_input_folder/\nOutputPath=/path_to_model_output_folder/\n</code></pre> <p>See example configuration files below:</p> Example configuration fileExample configuration file on CRIBExample configuration file on Snellius <p>An example configuration file can be found here. If setup() function in the python package PyStemmusScope is used to prepare data, the model configuration file including <code>InputPath</code> and <code>OutputPath</code> and the data of one site/location will be generated automatically.</p> <p>Config file: it is a text file that sets the paths required by the model. For example, see config_file_crib.txt or config_file_crib_global.txt in this repository. This file includes:</p> <ul> <li>SoilPropertyPath: a path to soil texture data and soil hydraulic   parameters.</li> <li>InputPath: this is the working/running directory of the model and should   include the data of <code>directional</code>, <code>fluspect_parameters</code>, <code>leafangles</code>,   <code>radiationdata</code>, <code>soil_spectra</code>, and <code>input_data.xlsx</code>.</li> <li>OutputPath: this is the base path to store outputs of the model. When the model runs, it creates <code>sitename_timestamped</code> directories under this path.</li> <li>ForcingPath: a path to the forcing/driving data. I.e. the Plumber2 dataset.</li> <li>Location: Location where the model should be run. Currently, the model runs at the site scale. For example, if we put <code>FI-Hyy</code> here, the model runs at the <code>FI-Hyy</code> site.</li> <li>StartTime: The start time of the model, in the ISO 8601 format. For example: <code>2001-01-01T00:00</code>. Note that the time can only be defined in half hour increments. If you want the start time to be the first available data point of the forcing data, you can set StartTime to <code>NA</code>.</li> <li>EndTime: The end time of the model. Formatted the same way as the StartTime. For example: <code>2001-12-31T23:30</code>. If you want the end time to be the last available data point of the forcing data, you can set EndTime to <code>NA</code>.</li> </ul> <p>To edit the config file, open the file with a text editor and change the paths. The variable names e.g. <code>SoilPropertyPath</code> should not be changed. Also, note a <code>/</code> is required at the end of each line.</p> <p>As explained above, the \"InputPath\" directory of the model is considered as the working/running directory and should include some data required by the model. As seen in the config file, the \"InputPath\" is now set as same as the \"input\" folder. This means that the \"input\" folder is treated as the model's working/running directory. However, it is possible to create a different working/running directory and set the \"InputPath\" to it. Then, you should copy the required data i.e. <code>directional</code>, <code>fluspect_parameters</code>, <code>leafangles</code>, <code>radiationdata</code>, <code>soil_spectra</code>, and <code>input_data.xlsx</code> to the working/running directory.</p> <p>Config file: it is a text file that sets the paths required by the model. For example, see config_file_snellius.txt or config_file_snellius_global.txt in this repository. This file includes:</p> <ul> <li>SoilPropertyPath: a path to soil texture data and soil hydraulic   parameters.</li> <li>InputPath: this is the working/running directory of the model and should   include the data of <code>directional</code>, <code>fluspect_parameters</code>, <code>leafangles</code>,   <code>radiationdata</code>, <code>soil_spectra</code>, and <code>input_data.xlsx</code>.</li> <li>OutputPath: this is the base path to store outputs of the model. When the model runs, it creates <code>sitename_timestamped</code> directories under this path.</li> <li>ForcingPath: a path to the forcing/driving data. I.e. the Plumber2 dataset.</li> <li>Location: Location where the model should be run. Currently, the model runs at the site scale. For example, if we put <code>FI-Hyy</code> here, the model runs at the <code>FI-Hyy</code> site.</li> <li>StartTime: The start time of the model, in the ISO 8601 format. For example: <code>2001-01-01T00:00</code>. Note that the time can only be defined in half hour increments. If you want the start time to be the first available data point of the forcing data, you can set StartTime to <code>NA</code>.</li> <li>EndTime: The end time of the model. Formatted the same way as the StartTime. For example: <code>2001-12-31T23:30</code>. If you want the end time to be the last available data point of the forcing data, you can set EndTime to <code>NA</code>.</li> </ul> <p>To edit the config file, open the file with a text editor and change the paths. The <code>InputPath</code> and <code>OutputPath</code> are user-defined directories, make sure they exist and you have right permissions. The variable name e.g. <code>SoilPropertyPath</code> should not be changed. Also, note a <code>/</code> is required at the end of each line.</p> <p>As explained above, the \"InputPath\" directory of the model is considered as the working/running directory and should include some data required by the model. As seen in the config file, the \"InputPath\" is now set to an \"input\" folder under \"scratch-shared\" directory. This means that the \"input\" folder is treated as the model's working/running directory. However, it is possible to create a different working/running directory and set the \"InputPath\" to it. Then, you should copy the required data i.e. <code>directional</code>, <code>fluspect_parameters</code>, <code>leafangles</code>, <code>radiationdata</code>, <code>soil_spectra</code>, and <code>input_data.xlsx</code> to the working/running directory. For example: <code>cp -r /projects/0/einf2480/model_parameters/vegetation_property/* /scratch-shared/EcoExtreML/STEMMUS_SCOPE/input/&lt;your_work_dir&gt;</code></p>"},{"location":"run_model/","title":"Running the model","text":"<p>NOTE: The instructions below are meant for users who want to run the model. If you want to add changes to the model, see the documentation on \"Contributing guide\".</p>"},{"location":"run_model/#workflow-of-stemmus_scope","title":"Workflow of STEMMUS_SCOPE","text":"<ol> <li>The model reads the forcing file associated with the specified site/location,   e.g., <code>FI-Hyy_1996-2014_FLUXNET2015_Met.nc</code> from \"ForcingPath\" and extracts   forcing variables in <code>.dat</code> format. The <code>.dat</code> files are stored in the   <code>InputPath</code> directory. In addition, the model reads the site information i.e.   the location and vegetation parameters.</li> <li>The model runs step by step until the whole simulation period is completed     i.e till the last time step of the forcing data.</li> <li>The results are saved as binary files temporarily. Then, the binary files are     converted to <code>.csv</code> files and stored in a <code>sitename_timestamped</code> output     directory under <code>OutputPath</code>.</li> </ol>"},{"location":"run_model/#run-the-model-with-matlab","title":"Run the model with MATLAB","text":"Local deviceCRIBSnellius <p>If you have MATLAB installed on your device, you can run the model by passing config file path to the variable <code>CFG</code> in the main script <code>STEMMUS_SCOPE.m</code>.</p> <p>As an alternative, you can run the main script using MATLAB command line in a terminal:</p> <pre><code>cd src/\nmatlab -nodisplay -nosplash -nodesktop -r \"run('STEMMUS_SCOPE.m');exit;\"\n</code></pre> <p>To open MATLAB desktop on CRIB, click on the <code>Remote Desktop</code> in the Launcher. Click on the <code>Applications</code>. You will find the 'MATLAB' software under the <code>Research</code>. After clicking on 'MATLAB', it asks for your account information that is connected to a MATLAB license. Then, you can run the model by passing config file path to the variable <code>CFG</code> in the main script <code>STEMMUS_SCOPE.m</code></p> <p>In order to use MATLAB, you need to send a request to add you to the user pool on Snellius. Then, pass config file path to the variable <code>CFG</code> in the main script <code>STEMMUS_SCOPE.m</code>. To run the main script <code>STEMMUS_SCOPE.m</code> using MATLAB command line in a terminal on a compute node:</p> <pre><code>module load 2023\nmodule load MATLAB/2023a-upd4\ncd src/\nmatlab -nodisplay -nosplash -nodesktop -r \"run('STEMMUS_SCOPE.m');exit;\"\n</code></pre> <p>To submit a job to a compute node, see instructions here.</p>"},{"location":"run_model/#run-the-model-with-matlab-runtime","title":"Run the model with MATLAB Runtime","text":"Local deviceCRIBSnelliusBMI interface <p>If you want to run the model as a standalone application, you need MATLAB Runtime version <code>2023a</code>. You don't need a license for MATLAB Runtime. Note that the version of the MATLAB Runtime is tied to the version of MATLAB. The executable file works on the operating system on which the file is created. The file <code>STEMMUS_SCOPE</code> under <code>exe</code> directory is an executable file of STEMMUS_SCOPE that is created using MATLAB version <code>2023a</code> in a Linux system.</p> <p>Make sure <code>LD_LIBRARY_PATH</code> is set correctly, in a terminal:</p> <pre><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/MATLAB/MATLAB_Runtime/v2023a/runtime/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v2023a/bin/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v2023a/sys/os/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v2023a/sys/opengl/lib/glnxa64\n</code></pre> <p>Change <code>/usr/local/MATLAB/MATLAB_Runtime/v2023a</code> to the path where MATLAB Runtime is installed.</p> <p>Then, you can run the model in a terminal:</p> <pre><code>./STEMMUS_SCOPE/exe/STEMMUS_SCOPE config_file_template.txt\n</code></pre> <p>On CRIB, MATLAB Runtime is not available. Contact the system administrator for more information.</p> <p>MATLAB Runtime is available on Snellius. You can run the model by passing the path of the config file in a terminal on a compute node:</p> <pre><code>module load 2023\nmodule load MATLAB/2023a-upd4\n./STEMMUS_SCOPE/exe/STEMMUS_SCOPE config_file_snellius.txt\n</code></pre> <p>Note that you don't need to set <code>LD_LIBRARY_PATH</code> on Snellius. To submit a job to a compute node, see instructions here.</p> <p>You can run the model using the BMI interface. The BMI interface is available in the script <code>STEMMUS_SCOPE_exe.m</code>. For that, you need MATLAB Runtime version <code>2023a</code>. You don't need a license for MATLAB Runtime. Note that the version of the MATLAB Runtime is tied to the version of MATLAB. The executable file works on the operating system on which the file is created. The file <code>STEMMUS_SCOPE</code> under <code>exe</code> directory is an executable file of STEMMUS_SCOPE that is created using MATLAB version <code>2023a</code> in a Linux system.</p> <p>Make sure <code>LD_LIBRARY_PATH</code> is set correctly, in a terminal:</p> <pre><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/MATLAB/MATLAB_Runtime/v2023a/runtime/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v2023a/bin/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v2023a/sys/os/glnxa64:/usr/local/MATLAB/MATLAB_Runtime/v2023a/sys/opengl/lib/glnxa64\n</code></pre> <p>Change <code>/usr/local/MATLAB/MATLAB_Runtime/v2023a</code> to the path where MATLAB Runtime is installed.</p> <p>To enter the BMI mode:</p> <pre><code>./STEMMUS_SCOPE/exe/STEMMUS_SCOPE \"\" bmi\n</code></pre> <p>Now, BMI asks you to select one of the steps \"initialize\", \"update\" or \"finalize\". To initialize the model using a config file, type:</p> <pre><code>initialize \"path/to/config_file_template.txt\"\n</code></pre> <p>Change <code>path/to/config_file_template.txt</code> to the actual path of the config file.</p>"},{"location":"run_model/#run-the-model-with-octave","title":"Run the model with Octave","text":"Local deviceCRIBSnellius <p>If you want to run the model for a small time period or tests purpose, you can use Octave. Allmost all funcationalities of STEMMUS_SCOPE are compatible with Octave, but the execution time is longer than MATLAB. After Octave installation, launch octave and install the following Octave packages:</p> <pre><code>pkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/io-2.6.4.tar.gz\"\npkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/statistics-1.4.3.tar.gz\"\n</code></pre> <p>Then, pass config file path to the variable <code>CFG</code> in the main script <code>STEMMUS_SCOPE.m</code>. Run the model in a terminal:</p> <pre><code>cd src/\noctave.bat --no-gui --interactive --silent --eval \"STEMMUS_SCOPE\"\n</code></pre> <p>On a Unix system, use <code>octave</code> instead of <code>octave.bat</code>.</p> <p> Octave from source <p>Note that Octave on many Linux distributions might be too old so we need to compile it ourselves. See https://wiki.octave.org/Building. Here are build instructions for Ubuntu 22.04:</p> <pre><code>sudo apt update\n# install minimal deps, see https://wiki.octave.org/Octave_for_Debian_systems#The_right_way for all dependencies\nsudo apt install -yq wget build-essential gfortran liblapack-dev libblas-dev libpcre3-dev libreadline-dev libnetcdf-dev\nwget https://mirror.serverion.com/gnu/octave/octave-7.2.0.tar.gz  # or download from local mirror at https://ftpmirror.gnu.org/octave\ntar -zxf octave-7.2.0.tar.gz\ncd octave-7.2.0\n./configure --prefix=/opt/octave\nmake -j 6\nsudo make install\n</code></pre> <p>Add <code>/opt/octave/bin</code> to PATH environment variable.</p> <pre><code>export PATH=$PATH:/opt/octave/bin\n</code></pre> <p>Launch Octave and install Octave dependencies with:</p> <p><pre><code>pkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/io-2.6.4.tar.gz\"\npkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/statistics-1.4.3.tar.gz\"\n</code></pre> </p> <p>On CRIB, you can use Octave. Allmost all funcationalities of STEMMUS_SCOPE are compatible with Octave, but the execution time is longer than MATLAB. After Octave installation, launch octave and install the following Octave packages:</p> <pre><code>pkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/io-2.6.4.tar.gz\"\npkg install \"https://downloads.sourceforge.net/project/octave/Octave%20Forge%20Packages/Individual%20Package%20Releases/statistics-1.4.3.tar.gz\"\n</code></pre> <p>Then, pass config file path to the variable <code>CFG</code> in the main script <code>STEMMUS_SCOPE.m</code>. Run the model in a terminal:</p> <pre><code>octave.bat --no-gui --interactive --silent --eval \"STEMMUS_SCOPE\"\n</code></pre> <p>Since Octave is very slow, it is not recommended to run the model on Snellius using Octave. Use MATLAB Runtime instead.</p>"},{"location":"run_model/#run-the-model-with-docker","title":"Run the model with Docker","text":"Local deviceCRIBSnellius <p>If you have Docker installed on your device, you can run the model using the docker image <code>ecoextreml/stemmus_scope</code> and BMI interface. The docker image is available on EcoExtreML. You can pull the <code>latest</code> image using the following command:</p> <pre><code>docker pull ghcr.io/ecoextreml/stemmus_scope:latest\n</code></pre> <p>Then, mount the directories and run the model in a terminal:</p> <pre><code>docker run -u $(id -u):$(id -g) -v /path_to_input_folder:/path_to_input_folder -v /path_to_output_folder:/path_to_output_folder -it ghcr.io/ecoextreml/stemmus_scope:latest\n</code></pre> <p>With <code>-it</code> option, you can enter the docker interactive mode. Now, BMI asks you to select one of the steps \"initialize\", \"update\" or \"finalize\". To initialize the model using a config file, type:</p> <pre><code>initialize \"path/to/config_file_template.txt\"\n</code></pre> <p>Make sure that the input and output directories are mounted correctly and <code>config_file_template.txt</code> is available in the input directory. Also, remove the container after running the model:</p> <pre><code>docker rm container_id\n</code></pre> <p>If Docker is installed on CRIB, follow the same instructions as for the <code>Local device</code>.</p> <p>Docker option is not available on Snellius. You need to use Apptainer, see instructions here.</p>"},{"location":"run_model/#example-workflow-of-running-the-model","title":"Example workflow of running the model","text":"<ol> <li>Download the latest version of the    model.</li> <li>Download the example dataset from Zenodo    here that includes the configuration    file.</li> <li>Choose one of the options above to run the model.</li> </ol>"}]}